// File: api/visit.js
// Purpose: Fallback writer for visitor counters.
// Writes to GitHub repo PanQY25/visitors-backup/backup.json using a PAT in env GH_TOKEN.

export default async function handler(req, res) {
  // Basic CORS
  if (req.method === 'OPTIONS') {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');
    return res.status(204).end();
  }

  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Content-Type', 'application/json; charset=utf-8');

  if (req.method !== 'POST') {
    return res.status(405).json({ ok: false, msg: 'Method Not Allowed' });
  }

  try {
    const body = await readJson(req).catch(() => ({}));
    // 前端可传 {country:"CN"}；若不传就用 'XX'
    const country = String(body?.country || 'XX').toUpperCase();

    const owner = 'PanQY25';
    const repo  = 'visitors-backup';
    const path  = 'backup.json';
    const token = process.env.GH_TOKEN; // Vercel 环境变量里配置

    if (!token) {
      return res.status(500).json({ ok: false, msg: 'Missing GH_TOKEN env' });
    }

    const api = `https://api.github.com/repos/${owner}/${repo}/contents/${path}`;
    const headers = {
      'Authorization': `Bearer ${token}`,
      'Accept': 'application/vnd.github+json',
      'User-Agent': 'visitor-backup-vercel'
    };

    // 1) 读取当前 backup.json
    let sha = null;
    let data = {};
    try {
      const r = await fetch(api, { headers });
      if (r.status === 200) {
        const j = await r.json();
        sha = j.sha || null;
        const buf = Buffer.from(j.content || '', 'base64').toString('utf8');
        data = safeParseJson(buf) || {};
      } else if (r.status === 404) {
        // 文件不存在也没关系，稍后会创建
        data = {};
      } else {
        // 其他错误直接反馈
        return res.status(502).json({ ok: false, msg: 'GitHub read failed', status: r.status });
      }
    } catch (e) {
      return res.status(502).json({ ok: false, msg: 'GitHub read error', error: String(e) });
    }

    // 2) 累加计数
    data[country] = (Number(data[country]) || 0) + 1;

    // 3) 写回 GitHub（使用 sha 支持并发/更新）
    const put = await fetch(api, {
      method: 'PUT',
      headers,
      body: JSON.stringify({
        message: `visit +1 ${country}`,
        content: Buffer.from(JSON.stringify(data)).toString('base64'),
        sha: sha || undefined
      })
    });

    if (!put.ok) {
      const txt = await put.text().catch(() => '');
      return res.status(502).json({ ok: false, msg: 'GitHub write failed', status: put.status, resp: txt });
    }

    return res.status(200).json({ ok: true, country, total: data[country] });
  } catch (err) {
    return res.status(500).json({ ok: false, msg: 'Internal Error', error: String(err) });
  }
}

// ---- helpers ----
function readJson(req) {
  return new Promise((resolve, reject) => {
    let raw = '';
    req.on('data', (c) => (raw += c));
    req.on('end', () => {
      try { resolve(raw ? JSON.parse(raw) : {}); }
      catch (e) { reject(e); }
    });
    req.on('error', reject);
  });
}

function safeParseJson(s) {
  try { return JSON.parse(s || '{}'); } catch { return {}; }
}
